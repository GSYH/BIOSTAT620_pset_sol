print(request)
response <- request(url) |> req_perform()
print(response)
library(httr2)
url <- "https://api.census.gov/data/2021/pep/population"
request = request(paste0(url,
paste0("?get=POP_2020,POP_2021,NAME&for=state:*&key=", census_key)))
print(request)
response <- request |> req_perform()
print(response)
resp_headers(response)
population <- response |> resp_body_string() |> jsonlite::fromJSON()
head(population)
source(file.path(getwd(), "/census-key.R"))
url <- "https://api.census.gov/data/2021/pep/population"
library(httr2)
url <- "https://api.census.gov/data/2021/pep/population"
request = request(paste0(url,
paste0("?get=POP_2020,POP_2021,NAME&for=state:*&key=", census_key)))
print(request)
response <- request |> req_perform()
print(response)
resp_headers(response)
population <- response |> resp_body_string() |> jsonlite::fromJSON()
head(population)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1)|>
as_tibble()|>
select(-state)|>
rename(state_name = NAME)|>
pivot_longer(cols = starts_with("POP"), names_to = "year", values_to = "population")
View(population)
View(population)
mutate(as.numeric(year))
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1)|>
as_tibble()|>
select(-state)|>
rename(state_name = NAME)|>
pivot_longer(cols = starts_with("POP"), names_to = "year", values_to = "population")|>
mutate(year = gsub("POP_", "", year))|>
as.numeric(population$year)
as.numeric(population$year)
View(population)
mutate(across(c(year, population), as.numeric))
source(file.path(getwd(), "/census-key.R"))
library(httr2)
url <- "https://api.census.gov/data/2021/pep/population"
request = request(paste0(url,
paste0("?get=POP_2020,POP_2021,NAME&for=state:*&key=", census_key)))
print(request)
response <- request |> req_perform()
print(response)
resp_headers(response)
population <- response |> resp_body_string() |> jsonlite::fromJSON()
head(population)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1)|>
as_tibble()|>
select(-state)|>
rename(state_name = NAME)|>
pivot_longer(cols = starts_with("POP"), names_to = "year", values_to = "population")|>
mutate(year = gsub("POP_", "", year))|>
mutate(across(c(year, population), as.numeric))|>
mutate(
state_abbr = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
# add state abbreviations using state.abb variable mapped from the state.name variable
# use case_when to add abbreviations for DC and PR
View(population)
population |>
arrange(population)
View(population)
population |>
arrange(population)
ggplot(aes(x = population, y = state_name)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(
title = "states' 2021 and 2022 populations",
x = "states",
y = "population")
population |>
arrange(population)
ggplot(population,aes(x = population, y = state_name)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(
title = "states' 2021 and 2022 populations",
x = "states",
y = "population")
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
population |>
arrange(population)
ggplot(population,aes(x = reorder(state_name, -population), y = state_name)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(
title = "states' 2021 and 2022 populations",
x = "states",
y = "population")
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
population |>
arrange(population)|>
ggplot(population,aes(x = reorder(state_name, -population), y = state_name)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(
title = "states' 2021 and 2022 populations",
x = "states",
y = "population")
population |>
arrange(desc(population))|>
ggplot(population,aes(x = reorder(state_name, -population), y = state_name)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
xlab("state")
population |> arrange(desc(population))|>
ggplot(aes(x = factor(state_name, levels = unique(state_name[order(population)])), y = population)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
xlab("state")
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
population |> arrange(desc(population))|>
ggplot(aes(x = factor(state_name, levels = unique(state_name[order(population)])), y = population)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
xlab("state")
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)
View(regions)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)
mutate(region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))
unnest_tokens(states, text)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))
unnest(states)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)
View(regions)
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)|>
rename(state_name = states)
mutate(region = as.factor(region))
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)|>
rename(state_name = states)|>
mutate(region = as.factor(region))
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region = as.factor(region))|>
mutate(region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)|>
# rename(state_name = states)|>
mutate(region = as.factor(region))
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region = as.factor(region),
region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)|>
rename(state_name = states)
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region = as.character(region))|>
mutate(region = as.factor(region),
region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)|>
rename(state_name = states)
View(regions)
population <- left_join(regions, by = "state_name")
population <- population|>
left_join(regions, by = "state_name")
View(population)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |> req_perform() |> resp_body_string() |> jsonlite::fromJSON()
head(cases_raw)
View(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |> eq_url_path_append("?$limit=10000000000") |> req_perform() |> resp_body_string() |> jsonlite::fromJSON()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |> req_url_path_append("?$limit=10000000000") |> req_perform() |> resp_body_string() |> jsonlite::fromJSON()
head(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |> req_url_path_append("?$limit=10000000000") |> req_perform() |> resp_body_string() |> jsonlite::fromJSON() |>
cases_raw <-from1SON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |>
req_url_path_append("?$limit=10000000000") |>
req_perform() |>
resp_body_string() |>
jsonlite::fromJSON() |>
cases_raw <-from1SON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |>
req_url_path_append("?$limit=10000000000") |>
req_perform() |>
resp_body_string() |>
jsonlite::fromJSON() |>
cases_raw <-from1SON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api,paste0("?$limit-10000000000")))|>
response <- request |> req_perform()|> resp_body_string() |>
cases_raw <-from1SON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api,paste0("?$limit-10000000000")))|>
response <- request |> req_perform()|> resp_body_string() |>
cases_raw <-from1SON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api,paste0("?$limit-10000000000")))
response <- request |> req_perform()|> resp_body_string()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api,paste0("?$limit-10000000000"))) |>
response <- request |> req_perform()|> resp_body_string()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api,paste0("?$limit-10000000000"))) |> request |> req_perform()|> resp_body_string()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |>
req_url_path_append("?$limit=10000000000") |>
req_perform() |>
resp_body_string() |>
jsonlite::fromJSON()
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |>
req_url_path_append("?$limit=10000000000") |>
req_perform() |>
resp_body_string() |>
jsonlite::fromJSON()|>
fromJSON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |>
req_url_path_append("?$limit=10000000000") |>
req_perform() |>
resp_body_string() |>
jsonlite::fromJSON()|>
cases_raw = fromJSON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |>
req_url_path_append("?$limit=10000000000") |>
req_perform() |>
resp_body_string() |>
jsonlite::fromJSON()|>
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <-request(api) |>
req_url_path_append("?$limit=10000000000") |>
req_perform() |>
resp_body_string() |>
jsonlite::fromJSON()
cases_raw = fromJSON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api, "?$limit=100000"))
response <- request |> req_perform() |> resp_body_json(simplifyVector = TRUE)
cases_raw <- fromJSON(response)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api, "?$limit=100000"))
response <- request |> req_perform() |> resp_body_string()
cases_raw <- fromJSON(response)
cases_raw <- cases_raw |> select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases)|>
mutate(date = ymd_hms(date),
cases = as.numeric(cases),
year = year(date))
head(cases_raw)
x <- cases_raw |> filter(date = make_date(2020,1,1) & date <= maka_date(2021, 12, 31))
x <- cases_raw |> filter(date == make_date(2020,1,1) & date <= maka_date(2021, 12, 31))
li
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api, "?$limit=100000"))
response <- request |> req_perform() |> resp_body_string()
cases_raw <- fromJSON(response)
cases_raw <- cases_raw |> select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases)|>
mutate(date = ymd_hms(date),
cases = as.numeric(cases),
year = year(date))
head(cases_raw)
x <- cases_raw |> filter(date == make_date(2020,1,1) & date <= maka_date(2021, 12, 31))|>
left_join(population, by = c("state", "year"))|>
mutate(rate = cases / population * 100000) |> filter(!is.na(state_name))
library(lubridate)
x <- cases_raw |> filter(date == make_date(2020,1,1) & date <= maka_date(2021, 12, 31))|>
left_join(population, by = c("state", "year"))|>
mutate(rate = cases / population * 100000) |> filter(!is.na(state_name))
library(lubridate)
x <- cases_raw |> filter(date = make_date(2020,1,1) & date <= maka_date(2021, 12, 31))|>
left_join(population, by = c("state", "year"))|>
mutate(rate = cases / population * 100000) |> filter(!is.na(state_name))
library(lubridate)
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31)) |>
left_join(population, by = c("state", "year")) |>
mutate(rate = cases / population * 100000) |>
filter(!is.na(state_name))
View(population)
library(lubridate)
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31)) |>
left_join(population, by = c("state_name", "year")) |>
mutate(rate = cases / population * 100000) |>
filter(!is.na(state_name))
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31))
View(cases_raw)
View(population)
View(population)
library(lubridate)
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31)) |>
left_join(population$population, by = c("state", "year")) |>
mutate(rate = cases / population * 100000) |>
filter(!is.na(state_name))
library(lubridate)
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31)) |>
left_join(population, by = c("state", "year")) |>
mutate(rate = cases / population * 100000) |>
filter(!is.na(state_name))
View(cases_raw)
View(population)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1)|>
as_tibble()|>
select(-state)|>
rename(state_name = NAME)|>
pivot_longer(cols = starts_with("POP"), names_to = "year", values_to = "population")|>
mutate(year = gsub("POP_", "", year))|>
mutate(across(c(year, population), as.numeric))|>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
source(file.path(getwd(), "/census-key.R"))
url <- "https://api.census.gov/data/2021/pep/population"
library(httr2)
url <- "https://api.census.gov/data/2021/pep/population"
request = request(paste0(url,
paste0("?get=POP_2020,POP_2021,NAME&for=state:*&key=", census_key)))
print(request)
response <- request |> req_perform()
print(response)
resp_headers(response)
population <- response |> resp_body_string() |> jsonlite::fromJSON()
head(population)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1)|>
as_tibble()|>
select(-state)|>
rename(state_name = NAME)|>
pivot_longer(cols = starts_with("POP"), names_to = "year", values_to = "population")|>
mutate(year = gsub("POP_", "", year))|>
mutate(across(c(year, population), as.numeric))|>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
population |> arrange(desc(population))|>
ggplot(aes(x = factor(state_name, levels = unique(state_name[order(population)])), y = population)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
xlab("state")
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region = as.character(region))|>
mutate(region = as.factor(region),
region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)|>
rename(state_name = states)
population <- population|>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |> req_perform() |> resp_body_string() |> jsonlite::fromJSON()
head(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request <- request(paste0(api, "?$limit=100000"))
response <- request |> req_perform() |> resp_body_string()
cases_raw <- fromJSON(response)
cases_raw <- cases_raw |> select(state, end_date, new_cases) |>
rename(date = end_date, cases = new_cases)|>
mutate(date = ymd_hms(date),
cases = as.numeric(cases),
year = year(date))
head(cases_raw)
library(lubridate)
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31)) |>
left_join(population, by = c("state", "year")) |>
mutate(rate = cases / population * 100000) |>
filter(!is.na(state_name))
x |> ggplot(aes(x = date, y = rate, group = state)) + geom_line(alpha = 0.2) +
facet_wrap(~region_name, nrow = 5)
library(lubridate)
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31)) |>
left_join(population, by = c("state", "year")) |>
mutate(rate = cases / population * 100000) |>
filter(!is.na(state_name))
x |> ggplot(aes(x = date, y = rate, group = state)) + geom_line(alpha = 0.2) +
facet_wrap(~region_name, nrow = 5) + labs(
title = "COVID-19 Cases per 100,000 by State from 2020-2021)",
x = "Date",
y = "Cases per 100,000"
)
library(lubridate)
x <- cases_raw |> filter(date >= make_date(2020,1,1) & date <= make_date(2021,12,31)) |>
left_join(population, by = c("state", "year")) |>
mutate(rate = cases / population * 100000) |>
filter(!is.na(state_name))
x |> ggplot(aes(x = date, y = rate, group = state)) + geom_line(alpha = 0.2) +
facet_wrap(~region_name, nrow = 5) + labs(
title = "COVID-19 Cases per 100,000 by State from 2020-2021",
x = "Date",
y = "Cases per 100,000"
) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
population <- population|>
left_join(regions, by = "state_name")
head(population)
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)|>
mutate(region = as.character(region))|>
mutate(region = as.factor(region),
region_name = recode(region_name,
"New York and New Jersey, Puerto Rico, Virgin Islands" = "nyisland"))|>
unnest(states)|>
rename(state_name = states)
head(regions)
library(tidyverse)
library(janitor)
population <- population |>
row_to_names(row_number = 1)|>
as_tibble()|>
select(-state)|>
rename(state_name = NAME)|>
pivot_longer(cols = starts_with("POP"), names_to = "year", values_to = "population")|>
mutate(year = gsub("POP_", "", year))|>
mutate(across(c(year, population), as.numeric))|>
mutate(
state = case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]
)
)
