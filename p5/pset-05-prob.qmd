---
title: Problem set 5
date: 2025-02-23
---

Please answer each of the exercises below. For those asking for a mathematical calculation please use LaTeX to show your work. Each problem is worth 1 point, for a total of 16 points.

Important: Make sure that your document renders in less than 5 minutes.

1. Write a function called `same_birthday` that takes a number `n` as an argument, randomly generates  `n` birthdays and returns `TRUE` if two or more birthdays are the same. You can assume nobody is born on February 29. 

Hint: use the functions `sample`, `duplicated`, and `any`.

```{r} 
same_birthday <- function(n){ 
  birthday = sample(1:365, n, replace = TRUE)
  
  return(any(duplicated(birthday)))
}
``` 

2. Suppose you are in a classroom with 50 people. If we assume this is a randomly selected group of 50 people, what is the chance that at least two people have the same birthday? Use a Monte Carlo simulation with $B=$1,000 trials based on the function `same_birthday` from the previous exercises. 

```{r} 
set.seed(1998)
B <- 10^3
n = 50

same = 0

for(i in 1:B){
  if (same_birthday(n)){
    same = same + 1
  }
}

chance = same/B

print(chance)
``` 

3. Redo the previous exercises for several values on `n` to determine at what group size do the chances become greater than 50%. Set the seed at 1997.


```{r} 
set.seed(1997)
compute_prob <- function(n, B = 10 ^ 3) {
  same = 0
  
  for (i in 1:B) {
    if (same_birthday(n)) {
      same = same + 1
    }
  }
  
  chance = same/B
  
  return(chance)
} 


compute_prob(22)
``` 

The group size where the chance becomes greater than 50% is: n = 22

4. These probabilities can be computed exactly instead of relying on Monte Carlo approximations. We use the multiplication rule:



$$
\mbox{Pr}(n\mbox{ different birthdays}) = 1 \times \frac{364}{365}\times\frac{363}{365} \dots \frac{365-n + 1}{365} 
$$


Plot the probabilities you obtained using Monte Carlo as a points and the exact probabilities with a red line. 

Hint: use the function `prod` to compute the exact probabilities.

```{r} 
n <- seq(1,50)

exact_prob <- function(n){ 
 prob = prod(364:(365 - n +1)/ 365)
 
 prob = 1- prob
 return(prob)
}

exact_prob <- sapply(n, exact_prob)

chance <- sapply(n, compute_prob)

library(tidyverse)
chance <- sapply(n, compute_prob)
plot(n, chance)
lines(n, exact_prob, col = "red")
# exact_prob <- function(n){
#   prob_unique <- seq(365, 365 - n + 1)/365 
#   1 - prod( prob_unique)
# }
``` 

5. Note that the points don't quite match the red line. This is because our Monte Carlos simulation was based on only 1,000 iterations. Repeat exercise 2 but for `n = 23` and try `B <- seq(10, 250, 5)^2` number iterations. Plot the estimated probability against `sqrt(b)`. Add horizontal lines around the exact probability $\pm$ 0.005. Note this could take several seconds to run. Set the seed to 1998.

```{r}
set.seed(1998)
B <- seq(10, 250, 5)^2

compute_prob <- function(B, n = 23){
  same_day <- replicate(B, same_birthday(n))
  mean(same_day)
}
prob <- sapply(B, compute_prob)
plot(sqrt(B), prob)
abline(h = mean(prob) + c(-0.005, 0.005), col = "red")
```

Describe when it starts to stabilize in that the estimates are within 0.005 for the exact probability. 

In this plot, we can see that the values start to stabilize at around sqrt(B) at 150.



6. Repeat exercise 4 but use the results of exercise 5 to select the number of iterations so that the points practically fall on the red curve.

Hint: If the number of iterations you chose is too large, you will achieve the correct plot but your document might not render in less than five minutes.

```{r}
# library(tidyverse)
# set.seed(1998)
# n_6 <- seq(1, 50)
# B <- seq(10, 250, 5)^2
# 
# exact_prob <- function(n_6){ 
#  prob = prod(364:(365 - n_6 +1)/ 365)
#  prob = 1- prob
#  return(prob)
# }
# 
# compute_prob <- function(B, n = 23){
#   same_day <- replicate(B, same_birthday(n))
#   mean(same_day)
# }
# 
# prob <- sapply(B, compute_prob)
# 
# exact_prob <- sapply(n_6, exact_prob)
# 
# 
# plot(sqrt(B), prob)
# lines(n_6, exact_prob, col = "red")



library(tidyverse)

set.seed(1998)

# Define the range of n
n <- seq(1, 50)

# Exact probability function
exact_prob <- function(n) { 
  prob = prod(364:(365 - n + 1) / 365)
  prob = 1 - prob
  return(prob)
}

exact_prob <- sapply(n, exact_prob)

# Exercise 5: Find stable B
B_vals <- seq(10, 250, 5)^2
compute_prob <- function(B, n = 23) {
  same_day <- replicate(B, same_birthday(n))
  mean(same_day)
}

prob <- sapply(B_vals, compute_prob)

# Find the smallest B where probability is stable within Â±0.005
stable_B <- B_vals[which.max(prob >= (mean(prob) - 0.005) & prob <= (mean(prob) + 0.005))]

# Compute Monte Carlo probability using stable B
compute_prob_n <- function(n, B = stable_B) {
  mean(replicate(B, same_birthday(n)))
}

chance <- sapply(n, compute_prob_n)

# Plot results
plot(n, chance)
lines(n, exact_prob, col = "red")

```


7a. In American Roulette, with 18 red slots, 18 black slots, and 2 green slots (0 and 00), what is the probability of landing on a green slot?

$$
\text{Prob} = \frac{2}{38} \approx 0.05263
$$


7b. The payout for winning on green is \$17 dollars. This means that if you bet a dollar and it lands on green, you get \$17. If it lands on red or black you lose your dollar. Create a sampling model using `sample` to simulate the random variable $X$ for the Casino's winnings when one person bets on green. 

```{r}
set.seed(1998)

n <- 1

outcomes <- c(1, -17)  

probabilities <- c(36/38, 2/38)  

X <- sample(outcomes, size = n, replace = TRUE, prob = probabilities)

mean(X)


```

8. Now create a random variable $S$ of the Casino's total winnings if $n = $1,000 people bet on green. Use Monte Carlo simulation to estimate the probability that the Casino loses money. 

```{r}
set.seed(1998)

simulations <- 1000

S <- replicate(simulations, sum(sample(outcomes, size = n, replace = TRUE, prob = probabilities)))

mean(S < 0)
```

9. What is the expected value of $X$? 


$$
E[X] = (1 \times \frac{36}{38}) + (-17 \times \frac{2}{38}) \approx 0.052
$$

10. What is the standard error of $X$?

$$
SE[X] = |(-17-1)| \times (\sqrt \frac{36}{38} \times \sqrt \frac{2}{38}) \approx 4.019
$$


11. What is the expected value of $S$? Does the Monte Carlo simulation confirm this?

$$
E[S] = 1000 \times E[X] \approx 52.632
$$

```{r}
set.seed(1998)

n <- 1000

outcomes <- c(1, -17)
probabilities <- c(36/38, 2/38)

simulations <- 10000
S <- replicate(simulations, sum(sample(outcomes, size = n, replace = TRUE, prob = probabilities)))

mean(S)
```

They are kind of the same but still have a 1.1566 unit difference.


12. What is the standard error of $S$? Does the Monte Carlos simulation confirm this?

$$
SE[S] = \sqrt {1000 \times (4.019)^2} \approx 127.48
$$
```{r}
sd(S)
```

It not the exactly the same.

13. Use data visualization to convince yourself that the distribution of $S$ is approximately normal. Make a histogram and a QQ-plot of standardized values of $S$.
The QQ-plot should be on the identity line.

```{r}
Z = (S - mean(S))/sd(S)


hist(Z)
qqnorm(Z)
```

14. Notice that the normal approximation is slightly off for the tails of the distribution. What would make this better? Increasing the number of people playing $n$ or the number of Monte Carlo iterations $B$?

**In this case, I think we can follow by the CLT which increase the number of people playing. CLT said as the sample size n increases, the sum of independent, identically distributed random variables becomes closer to a normal distribution**

15. Now approximate the casino profit probability estimated using CLT. Does it agree with the Monte Carlo simulation?

$$
P(S > 0) = P\left( \frac{S - E[S]}{SE[S]} > \frac{0 - 52.63}{127.48} \right) = P(Z > -0.413) \approx 1-0.339 \approx 0.659
$$

```{r}
set.seed(2025)

n <- 1000

outcomes <- c(1, -17)
probabilities <- c(36/38, 2/38)

simulations <- 10000
S <- replicate(simulations, sum(sample(outcomes, size = n, replace = TRUE, prob = probabilities)))

mean(S > 0)
```

They kind of the same, but not exactly

16. How many people $n$ must bet on green for the Casino to reduce the probability of losing money to 1%. Check your answer with a Monte Carlo simulation.

$$
P(S < 0) = 1\% = P(Z < -2.33) = 0.01
$$

$$
\frac{S - E[S]}{SE[S]} = -2.33
$$

$$
\frac{0 - n \cdot 0.05263}{\sqrt{n} \cdot 4.03} = -2.33
$$

$$
\sqrt{n} = \frac{2.33 \times 4.03}{0.05263}
$$

$$
n = \left( \frac{9.3899}{0.05263} \right)^2 \approx 31815
$$

```{r}
set.seed(1998)

n <- 31815
simulations <- 10000

outcomes <- c(1, -17)
prob <- c(36/38, 2/38)

S <- replicate(simulations, sum(sample(outcomes, size = n, replace = TRUE, prob = prob)))

mean(S < 0)
```

0.3338 > 0.1
