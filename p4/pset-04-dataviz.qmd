---
title: Problem set 4
date: 2025-02-09
---

Total points: 15.

## Introduction

In this problem set, we aim to use data visualization to explore the following questions:

1.  Based on SARS-Cov-2 cases, COVID-19 deaths and hospitalizations what periods defined the worst two waves of 2020-2021?
2.  Did states with higher vaccination rates experience lower COVID-19 death rates?
3.  Were there regional differences in vaccination rates?

We are not providing definitive answers to these questions but rather generating visualizations that may offer insights.

### Objective

We will create a single data frame that contains relevant observations for each jurisdiction, for each Morbidity and Mortality Weekly Report (MMWR) period in 2020 and 2021. The key outcomes of interest are:

-   SARS-CoV-2 cases
-   COVID-19 hospitalizations
-   COVID-19 deaths
-   Individuals receiving their first COVID-19 vaccine dose
-   Individuals receiving a booster dose

### Task Breakdown

Your task is divided into three parts:

1.  **Download the data**: Retrieve population data from the US Census API and COVID-19 statistics from the CDC API.
2.  **Wrangle the data**: Clean and join the datasets to create a final table containing all the necessary information.
3.  **Create visualizations**: Generate graphs to explore potential insights into the questions posed above.

## Instructions {.unnumbered}

-   As usual, copy and place the `pset-04-dataviz.qmd` file in a new directory called `p4`.

-   Within your `p4` directory, create the following directory:

    -   `code`

-   Inside the `code` directory, include the following files:

    -   `funcs.R`
    -   `wrangle.R`

Detailed instructions follow for each of the tasks.

## Download data

For this part we want the following:

-   Save all your code in a file called `wrangle.R` that produces the final data frame.
-   When executed, this code should save the final data frame in an RDA file in the `data` directory.

1.  (1 point) Copy the relevant code from the previous homework to create the `population` data frame. Put this code in the the `wrangle.R` file in the `code` directory. Comment the code so we know where the population is created, where the regions are read in, and where we combine these.

Test that your wrangling code works. Comment the following code out:

```{r}
source(file.path(getwd(), "./code/wrangle.R"))
head(population)
```

2.  (1 point) In the previous problem set we wrote the following script to download cases data:

```{r}
#| eval: false
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |> 
  req_url_query("$limit" = 10000000) |>
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```

We are now going to download three other datasets from CDC that provide hospitalization, provisional COVID deaths, and vaccine data. A different endpoint is provided for each one, but the requests are the same otherwise. To avoid rewriting the same code more than once, write a function called `get_cdc_data` that receives and endpoint and returns a data frame. Save this code in a file called `funcs.R`.

3.  (1 point) Use the function `get_cdc_data` to download the cases, hospitalization, deaths, and vaccination data and save the data frames. We recommend saving them into objects called: `cases_raw`, `hosp_raw`, `deaths_raw`, and `vax_raw`.

-   cases - `https://data.cdc.gov/resource/pwn4-m3yp.json`
-   hospitalizations - `https://data.cdc.gov/resource/39z2-9zu6.json`
-   deaths - `https://data.cdc.gov/resource/r8kw-7aab.json`
-   vaccinations `https://data.cdc.gov/resource/rh2h-3yt2.json`

We recommend saving them into objects called: `cases_raw`, `hosp_raw`, `deaths_raw`, and `vax_raw`.

```{r}
cases = "https://data.cdc.gov/resource/pwn4-m3yp.json"
hosp =  "https://data.cdc.gov/resource/39z2-9zu6.json"
deaths = "https://data.cdc.gov/resource/r8kw-7aab.json"
vax = "https://data.cdc.gov/resource/rh2h-3yt2.json"

source(file.path(getwd(), "./code/funcs.R"))

cases_raw = get_cdc_data(cases)
hosp_raw = get_cdc_data(hosp)
deaths_raw = get_cdc_data(deaths)
vax_raw = get_cdc_data(vax)
```

Take a look at all the dataframes you just read in.

```{r}
### Uncomment this to run this
print(head(cases_raw))
print(head(hosp_raw))
print(head(deaths_raw))
print(head(vax_raw))
```

## Wrangling Challenge

In this section, you will wrangle the files downloaded in the previous step into a single data frame containing all the necessary information. We recommend using the following column names: `date`, `state`, `cases`, `hosp`, `deaths`, `vax`, `booster`, and `population`.

### Key Considerations {.unnumbered}

-   **Align reporting periods**: Ensure that the time periods for which each outcome is reported are consistent. Specifically, calculate the totals for each Morbidity and Mortality Weekly Report (MMWR) period.

-   **Harmonize variable names**: To facilitate the joining of datasets, rename variables so that they match across all datasets.

4.  (1 point) One challenge is data frames use different column names to represent the same variable. Examine each data frame and report back 1) the name of the column with state abbreviations, 2) if the rate is yearly, monthly, or weekly, daily data, 3) all the column names that provide date information.

| Outcome | Jurisdiction variable name | Rate | time variable names |
|----------------|----------------|--------------------|---------------------|
| cases | "state" | weekly |  "start_date" |
| hospitalizations | "jurisdiction" | "daily" | "collection_date" |
| deaths | "state" | weekly |  "year", "week_ending_date" |
| vaccines | "location " | "daily" | "date" |
5.  (1 point) Wrangle the cases data frame to keep state, MMWR year, MMWR week, and the total number of cases for that week in that state. Keep only states for which we have population estimates. Hint: Use `as_date`, `ymd_hms`, `epiweek` and `epiyear` functions in the **lubridate** package. Comment appropriately. Display the result.

```{r}
library(lubridate)

cases_raw  = cases_raw |>
  select(start_date, state, new_cases) |>  # Keep only relevant columns
  mutate(
    week = epiweek(start_date),
    # Extract MMWR week from start_date
    year = epiyear(start_date),
    # Extract MMWR year from start_date
    cases = as.integer(new_cases) # Convert new_cases to integer for consistency
  ) |>
  select(-start_date, -new_cases)  # Remove original columns 

head(cases_raw)  # Display first few rows 
```

6.  (1 point) Now repeat the same exercise for hospitalizations. Note that you will have to collapse the data into weekly data and keep the same columns as in the cases dataset, except keep total weekly hospitalizations instead of cases. Remove weeks with less than 7 days reporting. Display your result and comment appropriately.

```{r}
hosp_raw = hosp_raw |> 
  select(jurisdiction, collection_date, hosp = new_covid_19_hospital) |>  # Keep relevant columns
  mutate(
    week = epiweek(collection_date),  # Extract MMWR week
    year = epiyear(collection_date),  # Extract MMWR year
    hosp = as.integer(hosp)          # Convert hospitalizations to integer
  ) |> 
  select(-collection_date) |>  # Remove original date column
  rename(state = jurisdiction) |>  # Standardize column name 
  group_by(state, week, year) |>  # Group by state and week
  summarise(hosp = sum(hosp)) |>  # Aggregate weekly hospitalizations
  ungroup()

head(hosp_raw)  # Display first few rows 
```

7.  (1 point) Repeat what you did in the previous two exercises for provisional COVID-19 deaths. Display the result and comment appropriately.

```{r}
library(readr)
deaths_raw = deaths_raw|>
  filter(state %in% population$state_name)|> #since the state is full name, and also have united state on it, we fix it
  mutate(death = parse_number(covid_19_deaths))|> #change the name
  mutate(date = as_date(ymd_hms(end_date)))|> #convert date
  mutate(mmwr_year = epiyear(date),mmwr_week = as.numeric(mmwr_week))|> #convert date and convert mmwr_week to numeric
  select(state, mmwr_week, mmwr_year, death)|> #select needed variables 
  arrange(state, mmwr_year, mmwr_week)
```

8.  (1 point) Repeat this now for vaccination data. Keep the variables `series_complete` and `booster` along with state and date. Display the result and comment appropriately. Hint: only use the rows with `date_type == 'Admin'` to only include vaccine data based on the day it was administered, rather than reported.

```{r}
vax_raw = vax_raw |>
  filter(date_type == "Admin") |>  # Keep only administered vaccination records
  select(
    date,
    location,
    administered_cumulative,
    series_complete_cumulative,
    booster_cumulative
  ) |>
  mutate(week = epiweek(date), # Convert to MMWR week format
         year = epiyear(date)   # Convert to MMWR year format
         
  ) |>
  mutate(booster = as.integer(booster_cumulative),
           # Convert booster count to integer
        series = as.integer(series_complete_cumulative)  # Convert completed series count to integer
  ) |>
  select(-date) |>  # Remove original date column
  group_by(location, week, year) |>  # Prepare for summarize
  rename(state = location) |>  # Standardize state column name
  summarise(boost = max(booster), # Keep the max booster count per week
            series = max(series)   # Keep the max completed series count per week
  ) |>
  ungroup()
                     
head(vax_raw)  # Display first few rows
```

9.  (1 point) Now we are ready to join the tables. We will only consider 2020 and 2021 as we don't have population sizes for 2022. However, because we want to guarantee that all dates are included we will create a data frame with all possible weeks. We can use this:

```{r}
library(tidyverse)
## Make dates data frame
all_dates <- data.frame(date = seq(make_date(2020, 1, 25), make_date(2021, 12, 31), by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date))

#Uncomment to run

dates_and_pop <- cross_join(all_dates, data.frame(state = unique(population$state))) |> left_join(population, by = c("state", "mmwr_year" = "year"))

dat = dates_and_pop|>
  left_join(cases_raw, by = c("state", "mmwr_week" = "week","mmwr_year" = "year"))|>
  left_join(hosp_raw, by = c("state", "mmwr_year" = "year","mmwr_week" = "week"))|>
  left_join(deaths_raw, by = c("state_name" = "state", "mmwr_year","mmwr_week"))|>
  left_join(vax_raw, by = c("state", "mmwr_year" = "year","mmwr_week" = "week"))|>
  arrange(date, state)
```

Now join all the tables to create your final table. Make sure it is ordered by date within each state. Call it `dat`. Show a few rows here.

## Data visualization: generate some plots

We are now ready to create some figures. For each question below, write code that generates a plot that addresses the question.

10. (1 point) Plot a trend plot for cases, hospitalizations and deaths for each state. Color by region. Plot rates per $100,000$ people. Place the plots on top of each other. Hint: Use `pivot_longer` and `facet_wrap`.

```{r}
dat1 = dat |>
  mutate(
    cases_rate = (cases / population) * 100000,
    hosp_rate = (hosp / population) * 100000,
    deaths_rate = (death / population) * 100000
  ) |>
  pivot_longer(
    cols = c(cases_rate, hosp_rate, deaths_rate),
    names_to = "name",
    values_to = "rate"
  )

ggplot(dat1,aes(
  x = date,
  y = rate,
  group = state,
  color = factor(region)
)) +
  geom_line(show.legend = TRUE) + facet_wrap( ~ name, scales = "free_y", ncol = 1)
```

11. (1 point) To determine when vaccination started and when most of the population was vaccinated, compute the percent of the US population (including DC and Puerto Rico) vaccinated by date. Do the same for the booster. Then plot both percentages.

```{r}
total_us_population <- sum(dat$population, na.rm = TRUE)


vax_percent <- dat |>
  group_by(mmwr_year, mmwr_week, date) |>
  summarise(
    total_vacc = sum(series, na.rm = TRUE),
    total_boos = sum(boost, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(
    percent_vacc = (total_vacc / total_us_population) * 100,
    percent_boos = (total_boos / total_us_population) * 100
  )


vax_percent_long <- vax_percent |>
  pivot_longer(
    cols = c(percent_vacc, percent_boos),
    names_to = "metric",
    values_to = "percentage"
  )


ggplot(vax_percent_long, aes(x = date, y = percentage, color = metric)) +
  geom_line() +
  labs(
    title = "Percentage of the US Population Vaccinated",
    x = "Date",
    y = "Percentage (%)",
    color = "Type"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 45, hjust = 1))
```

12. (1 point) Plot the distribution of vaccination rates across states on July 1, 2021.

```{r}
vax_july <- dat |>
  filter(mmwr_year == 2021, mmwr_week == epiweek(as.Date("2021-07-01"))) |>
  mutate(percent_vacc = (series/population)*100)

ggplot(vax_july, aes(x = state,  y = percent_vacc, fill = state)) +
  geom_bar(stat = "identity") +
  labs(title = "distribution of vaccination rates across states on July 1, 2021", x = "state", y = "Percent Vaccinated") +
  theme_minimal()
```

13. (1 point) Is there a difference across region? Generate a plot of your choice.

```{r}
vax_july <- dat |>
  filter(mmwr_week == epiweek(as.Date("2021-07-01"))) |>
  group_by(region) |>
    summarise(
    total_population = sum(population, na.rm = TRUE), 
    total_vaccinated = sum(series, na.rm = TRUE),
    percent_vacc = (total_vaccinated / total_population) * 10)

ggplot(vax_july, aes(x = region, y = percent_vacc, fill = factor(region))) +
  geom_bar(stat = "identity") +
  labs(title = "distribution of vaccination rates across states on July 1, 2021", x = "region", y = "Vaccination Rate") +
  theme_minimal()
```




Discuss what the plot shows.

Yes, there are difference across region. We can see from the graph that different region have different vaccination rate. 


14. (1 point) Using the previous figures, identify a time period that meets the following criteria:

-   A significant COVID-19 wave occurred across the United States.
-   A sufficient number of people had been vaccinated.

Next, follow these steps:

-   For each state, calculate the **COVID-19 deaths per day per 100,000 people** during the selected time period.
-   Determine the **vaccination rate (primary series)** in each state as of the last day of the period.
-   Create a scatter plot to visualize the relationship between these two variables:
    -   The **x-axis** should represent the vaccination rate.
    -   The **y-axis** should represent the deaths per day per 100,000 people.
    
Time period: 2021-07-01 to 2021-09-30 
```{r}
series_period_time = dat |>
  filter(date >= as.Date("2021-07-01") &
           date <= as.Date("2021-09-30")) |>
  group_by(state) |>
  summarise(
    daily_deaths = sum(death, na.rm = TRUE),
    days = n()*7,
    total_vaccinated = max(series, na.rm = TRUE),
    population = unique(population),
    deaths_per_day_100k = (daily_deaths / days) *100000 / (population)
  ) |>
 mutate(series_rate = (total_vaccinated/population)*100) |>
  ungroup()

ggplot(series_period_time,
       aes(x = series_rate, y = deaths_per_day_100k, color = state)) +
  geom_point(size = 2) +
  labs(title = "2021-07-01 to 2021-09-30 vaccination rates vs. death per daily per 100k", x = "vaccination rate", y = "deaths per day per 100,000 people")
```

15. (1 point) Repeat the exercise for the booster.

```{r}
booster_period_time = dat |>
  filter(date >= as.Date("2021-07-01") &
           date <= as.Date("2021-09-30")) |>
  group_by(state) |>
  summarise(
    daily_deaths = sum(death, na.rm = TRUE),
    days = n()*7,
    total_booster_vaccinated = max(boost, na.rm = TRUE),
    population = unique(population),
    deaths_per_day_100k = (daily_deaths / days) *100000 / (population)
  ) |>
  mutate(booster_rate = (total_booster_vaccinated/population)*100) |>
  ungroup()



ggplot(booster_period_time,
       aes(x = booster_rate, y = deaths_per_day_100k, color = state)) +
  geom_point(size = 2) +
  labs(title = "2021-07-01 to 2021-09-30 booster vaccination rates vs. death per daily per 100k", x = "booster rate", y = "deaths per day per 100,000 people")
```
